A java project from my Advanced Object Oriented Programming course. 

I was tasked to create an Expression class which creates and evaluates mathematical expressions using its child classes (Addition, Multiplication, GreaterThan, etc).

I was then tasked to use an ExpressionCollector class which collects the Expression objects and performs an operation between them. 
This is done through the ExpressionCollector child classes (AddAll, ConjoinAll, etc). 
The ExpressionCollector class was given partially filled, I was responsible for completing the addExpression(int left, String op, int right) method.

This project therefore consists of two inheritence trees, one with Expression at the root and one with ExpressionCollector at the root.

I was able to learn the concept of polymorphism through building this project. The method evaluate() in both the parent classes behave differently
depending on the run time type of the object. For example, Addition adds the values in its evaluate() whereas Multiplication will multiply the values in 
its evaluate().
